
npm install --save crypto-js

// Part 1
const SHA256 = require('crypto-js/sha256');
class Block{
    constructor(index, timestamp, data, previousHash = '')
    {
        this.index = index;
        this.timestamp = timestamp;
        this.data = data;
        this.previousHash = previousHash;
        this.hash = this.calculateHash();
        
    }
    calculateHash(){
        return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data)).toString();
    }
}
class Blockchain{
    // 
    constructor(){
        this.chain =[this.createGenesisBlock()];
    }

    // 
    createGenesisBlock(){
        return new Block(0, "07/15/2018", "Genesis block","0");
    }

    // 
    getLastestBlock(){
        return this.chain[this.chain.length - 1];
    }

    // 
    addBlock(newBlock){
        newBlock.previousHash = this.getLastestBlock().hash;
        newBlock.hash = newBlock.calculateHash();
        this.chain.push(newBlock);

    }

    // 
    isChainValid(){
        for(let i = 1; i< this.chain.length; i++) {
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];

            // 
            if(currentBlock.hash !== currentBlock.calculateHash()){
                return false;
            }
            // 
            if(currentBlock.previousHash !== previousBlock.hash){
                return false;
            }
        }

        return true;
       
    }
}

// 
let savjeeCoin = new Blockchain();
savjeeCoin.addBlock(new Block(1, "07/15/2018", { amount: 4}));
savjeeCoin.addBlock(new Block(2, "07/16/2018", { amount: 12}));


// 
console.log(JSON.stringify(savjeeCoin, null, 4));
console.log('Is blockchain valid? ' + savjeeCoin.isChainValid());

savjeeCoin.chain[1].data = { amount: 4 };
savjeeCoin.chain[1].hash = savjeeCoin.chain[1].calculateHash();

console.log(JSON.stringify(savjeeCoin, null, 4));

console.log('Is blockchain valid? ' + savjeeCoin.isChainValid());

// End Part 1

// Part 2
const SHA256 = require('crypto-js/sha256');
class Block{
    constructor(index, timestamp, data, previousHash = '')
    {
        this.index = index;
        this.timestamp = timestamp;
        this.data = data;
        this.previousHash = previousHash;
        this.hash = this.calculateHash();
        this.nonce = 0;

        
    }
    calculateHash(){
        return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data) + this.nonce).toString();
    }
    // 
    mineBlock(difficulty)
    {
        while(this.hash.substring(0, difficulty) !== Array(difficulty + 1).join("0"))
        {
            this.nonce++;
            this.hash = this.calculateHash();

        }
        console.log("Block mined: " + this.hash);
    }
}
class Blockchain{
    // 
    constructor(){
        this.chain =[this.createGenesisBlock()];
        this.difficulty = 2;
    }

    // 
    createGenesisBlock(){
        return new Block(0, "07/15/2018", "Genesis block","0");
    }

    // 
    getLastestBlock(){
        return this.chain[this.chain.length - 1];
    }

    // 
    addBlock(newBlock){
        newBlock.previousHash = this.getLastestBlock().hash;
        newBlock.mineBlock(this.difficulty);
        newBlock.hash = newBlock.calculateHash();
        this.chain.push(newBlock);

    }

    // 
    isChainValid(){
        for(let i = 1; i< this.chain.length; i++) {
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];

            // 
            if(currentBlock.hash !== currentBlock.calculateHash()){
                return false;
            }
            // 
            if(currentBlock.previousHash !== previousBlock.hash){
                return false;
            }
        }

        return true;
       
    }
}

// 
let savjeeCoin = new Blockchain();

console.log('Mining block 1...');
savjeeCoin.addBlock(new Block(1, "07/15/2018", { amount: 4}));

console.log('Mining block 2...');
savjeeCoin.addBlock(new Block(2, "07/16/2018", { amount: 12}));

// End Part 2

// Part 3

const SHA256 = require('crypto-js/sha256');

class Transaction{
    constructor(fromAddress, toAddress, amount){
        this.fromAddress = fromAddress;
        this.toAddress = toAddress;
        this.amount = amount;
    }
}

class Block{
    constructor(timestamp, transactions, previousHash = '')
    {
        this.previousHash = previousHash;
        this.timestamp = timestamp;
        this.transactions = transactions;
       
        this.hash = this.calculateHash();
        this.nonce = 0;

        
    }
    calculateHash(){
        return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data) + this.nonce).toString();
    }
    // 
    mineBlock(difficulty)
    {
        while(this.hash.substring(0, difficulty) !== Array(difficulty + 1).join("0"))
        {
            this.nonce++;
            this.hash = this.calculateHash();

        }
        console.log("Block mined: " + this.hash);
    }
}
class Blockchain{
    // 
    constructor(){
        this.chain =[this.createGenesisBlock()];
        this.difficulty = 2;
        this.pendingTransactions = [];
        this.miningReward = 100;
    }

    // 
    createGenesisBlock(){
        return new Block("07/15/2018", "Genesis block","0");
    }

    // 
    getLastestBlock(){
        return this.chain[this.chain.length - 1];
    }

    // 
   minePendingTransactions(miningRewardAddress)
   {
       let block = new Block(Date.now(), this.pendingTransactions);
       block.mineBlock(this.difficulty);

       console.log('Block successfully mined!');
       this.chain.push(block);

       this.pendingTransactions = [
           new Transaction(null, miningRewardAddress, this.miningReward)
       ];
   }

   createTransaction(transaction){
       this.pendingTransactions.push(transaction);
   }

   getBalanceOfAddress(address){
       let balance = 0;
       for(const block of this.chain){
           for(const trans of block.transactions){
               if(trans.fromAddress === address){
                   balance -= trans.amount;
               }

               if(trans.toAddress === address){
                    balance += trans.amount;
                }
           }
       }

       return balance;
   }
    // 
    isChainValid(){
        for(let i = 1; i< this.chain.length; i++) {
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];

            // 
            if(currentBlock.hash !== currentBlock.calculateHash()){
                return false;
            }
            // 
            if(currentBlock.previousHash !== previousBlock.hash){
                return false;
            }
        }

        return true;
       
    }
}

// 
let savjeeCoin = new Blockchain();
savjeeCoin.createTransaction(new Transaction('address1', 'address2', 100));
savjeeCoin.createTransaction(new Transaction('address2', 'address1', 50));

console.log('\n Starting the miner....');
savjeeCoin.minePendingTransactions('xaviers-address');
console.log('\nBalance of xavier is', savjeeCoin.getBalanceOfAddress('xaviers-address'));

// 
console.log('\n Starting the miner again....');
savjeeCoin.minePendingTransactions('xaviers-address');
console.log('\nBalance of xavier is', savjeeCoin.getBalanceOfAddress('xaviers-address'));

// End Part 3